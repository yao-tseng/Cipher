import java.util.*;
import java.io.*;

class AutokeyCipher { 

	public static void main( String[] args ) {
		//create variables and set default values;
		//(String)input: user input;
		//(String)plaintxt: user input string in uppercase without spaces;
		//(String)key: keyword used to encrypt plaintext;
		String input = "hold my own";
		String plaintxt = "HOLDMYOWN";
		String key = "SECRET";
		
		//check user input;
		//if user input is empty, execute with default values;
		if ( args.length == 0 ) System.out.println( "empty imput, execute default..." );
		//if user inputs only one argument, take the only argument as plaintext and execute with
		// the default key "SECRET";
		else if ( args.length == 1 ) {
			System.out.println( "no key input, default key = \"secret\"" );
			input = args[0];
			plaintxt = input.toUpperCase();
		}
		//if user inputs more than one arguments, take the last argument as the key and all others
		// as plaintext;
		else {
			for ( int i=0; i<args.length-1; i++ ) {
				input += args[i] + " ";
				plaintxt += args[i].toUpperCase();
				key = args[args.length-1].toUpperCase();
			}
		}
		//print data;
		System.out.print( "Input     : " + input + '\n' + "Key       : " + key );

		//(String)autoKey: autokey generated by key input and plaintext input;
		//call function "keyGenerate";
		String autoKey = keyGenerate( plaintxt, key );
		System.out.println( '\n' + "Auto Key  : " + autoKey );

		//(Array)codeArr: an array which stores the ciphertext;
		//call function "encrypt";
		char[] codeArr = encrypt( plaintxt, autoKey );
		System.out.print( "Plaintext : " + plaintxt + '\n' + "Ciphertext: " );
		//print ciphertext;
		for ( int i=0; i<plaintxt.length(); i++ ) System.out.print( codeArr[i] );
		System.out.println();

		//encrypt rules;
		encryptRules( plaintxt, autoKey, codeArr );
	}

	//(Function)keyGenerate: auto generate the key by concatenate user key input and a certain length
	// of plaintext;
	static String keyGenerate( String plaintxt, String key ) {
		//(Integer)keyLength: length of key;
		//(String)autoKey: automatically generated key;
		//concatenate user key input and user plaintext input then trim the length down to the
		// length of plaintext;
		int keyLength = plaintxt.length();
		String autoKey = (key + plaintxt);
		autoKey = autoKey.substring(0, keyLength);
		
		return autoKey;
	}

	//(Function)encrypt: encrypt plaintext;
	static char[] encrypt( String plaintxt, String autoKey ) {
		//(Integer)code: letter of ciphertext in integer value;
		//(Array)codeArr: an array which stores the ciphertext;
		int code = 0;
		char[] codeArr = new char[plaintxt.length()];

		//shift letter at each position with integer value of key at corresponding position;
		for ( int i=0; i<plaintxt.length(); i++ ) {
			code = ( (int)plaintxt.charAt(i) + (int)autoKey.charAt(i) ) % 26 + 65;		
			codeArr[i] = (char)code;
		}
		
		return codeArr;
	}

	//(Function)encryptRules: encrypting rules;
	static void encryptRules( String plaintxt, String autoKey, char[] codeArr ) {
		System.out.println( '\n' + "--convert rules--" );
		for ( int i=0; i<plaintxt.length(); i++ ) {
			int shift = (int)autoKey.charAt(i) - 65;
			System.out.print( plaintxt.charAt(i) + "-->" + codeArr[i] + " (shift: " );
			if ( shift<10 ) System.out.print( "0" );
			System.out.println( shift + ")" );
		}
	}
}
